// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TipoUsuario {
  id       Int       @id @default(autoincrement())
  Nombre   String
  admin    Boolean   @default(false)
  usuarios Usuario[]
}

model Usuario {
  id              Int          @id @default(autoincrement())
  nombre          String
  apellidos       String
  email           String       @unique
  password        String
  tipo_usuario_id Int?
  grupoUsuario    TipoUsuario? @relation(fields: [tipo_usuario_id], references: [id])
  pedidos         Pedido[]
}

model ecommerce {
  id                    Int     @id @default(autoincrement())
  nombre                String
  titulo                String
  mensaje_sin_stock     String
  mercadopago_api_key   String
  despacho_gratis_desde String
  telefono1             String
  telefono2             String
  whatsapp1             String
  whatsapp2             String
  correo_info           String
  correo_contacto       String
  horario_atencion      String
  redes_sociales        Json
  despacho_gratis       Boolean
  descripcion           String
  clarity_id            String
  pixel_fb_id           String
}

// Definición del modelo Producto
model Producto {
  id          Int    @id @default(autoincrement())
  nombre      String
  descripcion String
  precio      Float
  stock       Int
  marca_id    Int

  variantes  VarianteProducto[]
  categorias CategoriaProducto[]
  Marca      Marca?              @relation(fields: [marcaId], references: [id])
  marcaId    Int?
}

model VarianteProducto {
  id          Int    @id @default(autoincrement())
  producto_id Int
  color       String
  talla       String
  precio      Float
  stock       Int

  producto      Producto        @relation(fields: [producto_id], references: [id])
  detallePedido DetallePedido[]
  categoria     Categoria[]
}

model Categoria {
  id                         Int                 @id @default(autoincrement())
  nombre                     String
  varianteProducto           VarianteProducto?   @relation(fields: [varianteProductoVarianteID], references: [id])
  varianteProductoVarianteID Int?
  categorias                 CategoriaProducto[]
  varianteProductoId         Int?
}

model CategoriaProducto {
  id           Int       @id @default(autoincrement())
  tabla        String
  producto     Producto  @relation(fields: [producto_id], references: [id], onDelete: Cascade)
  categoria    Categoria @relation(fields: [categoria_id], references: [id], onDelete: Cascade)
  categoria_id Int
  producto_id  Int
}

model Pedido {
  id          Int             @id @default(autoincrement())
  usuario_id  Int?
  fechaPedido DateTime
  estado      String
  usuario     Usuario?        @relation(fields: [usuario_id], references: [id])
  detalles    DetallePedido[]
  Pago        Pago[]
}

model DetallePedido {
  id                         Int              @id @default(autoincrement())
  pedido_id                  Int
  varianteID                 Int
  cantidad                   Int
  precioUnitario             Float
  pedido                     Pedido           @relation(fields: [pedido_id], references: [id])
  variante                   VarianteProducto @relation(fields: [varianteProductoVarianteID], references: [id])
  pedidoPedidoID             Int
  varianteProductoVarianteID Int
}

model Pago {
  id           Int     @id @default(autoincrement())
  pedido_id    Int
  metodoPago   String // Método de pago (ej. "Mercado Pago")
  estado       String // Estado del pago (ej. pendiente, aprobado, rechazado, etc.)
  monto        Float // Monto del pago
  detallesPago String? // Detalles adicionales del pago si es necesario
  // Relación con pedido
  pedido       Pedido  @relation(fields: [pedido_id], references: [id])
}

model Marca {
  id          Int        @id @default(autoincrement())
  nombre      String
  descripcion String
  productos   Producto[]
}
